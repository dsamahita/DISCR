class SET:
    def __init__(self, u_set):
        self.u_set = u_set

    def is_member(self, element):
        return "Element Found" if element in self.u_set else "Element Not Found"

    def powerset(self):
        lst = []
        elements = list(self.u_set)
        length = len(elements)
        for i in range(1 << length):
            subset = {elements[j] for j in range(length) if (i & (1 << j))}
            lst.append(subset)
        print("Power Set:")
        for s in lst:
            print(s)

    def subset(self, subset_set):
        if subset_set.u_set.issubset(self.u_set):
            return "This Is A Subset"
        else:
            return "This Is Not A Subset"

    def union_intersection(self, set2):
        print("Intersection:", self.u_set.intersection(set2.u_set))
        print("Union:", self.u_set.union(set2.u_set))

    def complement(self, complement_set):
        print("Complement (U - A):", self.u_set - complement_set.u_set)

    def difference_and_symmetric_difference(self, set2):
        print("Difference (A - B):", self.u_set.difference(set2.u_set))
        print("Symmetric Difference:", self.u_set.symmetric_difference(set2.u_set))

    def cartesian_product(self, set2):
        cartesian = {(x, y) for x in self.u_set for y in set2.u_set}
        print("Cartesian Product:", cartesian)


def set_create(uni="set"):
    try:
        u_set = set(map(int, input(f"Enter elements of {uni} (space separated): ").split()))
        print(f"{uni}:", u_set)
        return u_set
    except ValueError:
        print("Please enter only integers.")
        return set_create(uni)


def main():
    choice = input("""\nMain Menu
1. Check if element is in the set
2. Display powerset
3. Check if one set is a subset of another
4. Union and Intersection
5. Complement of a set
6. Difference and Symmetric Difference
7. Cartesian Product
Enter your choice: """)

    if choice == '1':
        set1 = SET(set_create())
        element = int(input("Enter element to check: "))
        print(set1.is_member(element))

    elif choice == '2':
        set1 = SET(set_create())
        set1.powerset()

    elif choice == '3':
        universal_set = SET(set_create("Universal Set"))
        subset_set = SET(set_create("Subset"))
        print(universal_set.subset(subset_set))

    elif choice == '4':
        set1 = SET(set_create("First Set"))
        set2 = SET(set_create("Second Set"))
        set1.union_intersection(set2)

    elif choice == '5':
        universal_set = SET(set_create("Universal Set"))
        subset_set = SET(set_create("Set"))
        universal_set.complement(subset_set)

    elif choice == '6':
        set1 = SET(set_create("Set A"))
        set2 = SET(set_create("Set B"))
        set1.difference_and_symmetric_difference(set2)

    elif choice == '7':
        set1 = SET(set_create("First Set"))
        set2 = SET(set_create("Second Set"))
        set1.cartesian_product(set2)

    else:
        print("Invalid input! Please try again.")


if __name__ == "__main__":
    while True:
        main()
        cont = input("\nDo you want to perform another operation? (y/n): ")
        if cont.lower() != 'y':
            break

