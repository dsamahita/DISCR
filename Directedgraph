class DirectedGraph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adj_list = [[] for _ in range(vertices)]

    def add_edge(self, u, v):
        self.adj_list[u].append(v)

    def compute_degrees(self):
        in_degrees = [0] * self.vertices
        out_degrees = [0] * self.vertices

        for u in range(self.vertices):
            for v in self.adj_list[u]:
                out_degrees[u] += 1
                in_degrees[v] += 1

        return in_degrees, out_degrees

if __name__ == "__main__":
    num_vertices = int(input("Enter number of vertices: "))
    g = DirectedGraph(num_vertices)

    num_edges = int(input("Enter number of edges: "))
    for i in range(num_edges):
        a = int(input(f"Enter first vertex of edge {i+1}: ")) - 1
        b = int(input(f"Enter second vertex of same edge: ")) - 1
        g.add_edge(a, b)

    in_deg, out_deg = g.compute_degrees()

    print("\nVertex\tIn-Degree\tOut-Degree")
    for i in range(num_vertices):
        print(f"{i+1}\t{in_deg[i]}\t\t{out_deg[i]}")
